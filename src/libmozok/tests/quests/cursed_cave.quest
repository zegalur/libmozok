# Copyright 2024 Pavlo Savchuk. Subject to the MIT license.
# This is an example quest from the reference doc.


# Single-line comments start with the # symbol.

# The first command is always `version X Y`.
version 1 0

# The second command is always `project <project_name>`, where `<project_name>` 
# is a unique project name (without spaces).
project my_project


# ======== TYPES ======== #

# Defines new types.
# Type names always start with an uppercase letter.
type Location
type Cursed

# Defines subtypes. Multiple supertypes are supported.
type CursedLocation : Location, Cursed


# IMPORTANT: You can only use names that were previously defined.


# ======== OBJECTS ======== #

# Defines new objects. Objects are indestructible and non-copyable entities.
# Object names always start with a lowercase letter.
object town : Location
object heaven : Location
object forest : Location

# This object has the types: CursedLocation, Location, Cursed
object cave : CursedLocation

# But this object has the types: Location, Cursed
# These two objects are not identical in their type!
object cave_X : Location, Cursed


# ======== RELATIONS ======== #

# Defines new relations.
# Relation names always start with an uppercase letter.
rel At(Location)
rel Road(Location, Location) # from, to
rel CursedRoad(CursedLocation, Location) # from, to


# ======== RELATION LIST ======== #

# Relation lists are macro-commands; they are substituted during loading.
# Relation list names always start with an uppercase letter.
rlist InitialState:
    # Arguments:
    initialLocation : Location

    # Substitution is a list of previously defined relations and rlists:
    At(initialLocation)

    # You can refer to objects other than arguments:
    # [cave] <== [forest] <=> [town]
    Road(town, forest)
    Road(forest, town)
    Road(forest, cave)
    CursedRoad(cave, forest)


# ======== ACTIONS ======== #

# Actions define how we can interact with the world.
# Action names always start with an uppercase letter.
action MoveTo:
    # Arguments:
    prevLocation : Location
    newLocation : Location

    # Action preconditions.
    # In order to be applicable, action preconditions must hold.
    pre Road(prevLocation, newLocation)
        At(prevLocation)

    # Statements after `rem` will be removed.
    rem At(prevLocation)

    # Statements after `add` will be added.
    add At(newLocation)


# Another example:
action RemoveCurse:
    cursedLocation : CursedLocation
    otherLocation : Location
    pre At(cursedLocation)
        CursedRoad(cursedLocation, otherLocation)
    rem CursedRoad(cursedLocation, otherLocation)
    add Road(cursedLocation, otherLocation)


# This action can be used for initializing the world:
action Init:
    pre # none
    rem # none
    # Actions that refer to objects
    # other than arguments are called `global`.
    # This action is therefore a global action.
    add InitialState(town)


# ======== QUESTS ======== #

# Defines a new subquest. Quest names start with an uppercase letter.
# You can only use objects and actions that are explicitly listed.
quest MoveToCursedCave:
    preconditions:
        # Quest preconditions are here.
    goal:
        # Quest goals are here.
        At(cave)
    actions:
        # The (vertical) list of allowed actions:
        MoveTo
    objects:
        # The (vertical) list of allowed objects:
        town
        forest
        cave
    subquests:
        # none


# In order to use a subquest, you must also define a special action,
# marked as N/A (Not Applicable). This action will represent the subquest.
# N/A actions can't be applied, but they can appear in a quest plan and
# they can trigger a subquest.
action N/A MoveToCursedLocation:
    cursedLocation : CursedLocation
    pre # none
    rem # none
    add At(cursedLocation)


# The main quest will automatically open after an action is applied,
# once the preconditions are met.
main_quest FinishYourMission:
    options:
        # Quests can have various additional options:
        searchLimit 100 # Sets a search limit (positive integer)
        spaceLimit 100 # Sets a space limit (positive integer)
        omega 1 # Sets omega value to a given positive integer value
    preconditions:
        # none
    goal:
        # The first quest goal is clearly UNREACHABLE.
        # The planner will switch to the second goal.
        At(heaven)
    goal:
        # This goal is REACHABLE.
        # The planner will build a new plan for this goal.
        # The goal is to open the road from the cave back to the forest.
        Road(cave, forest)
    actions:
        MoveToCursedLocation
        RemoveCurse
    objects:
        cave
        forest
        heaven
    subquests:
        MoveToCursedCave