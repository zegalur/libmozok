# -= Game of Fifteen =-
#
# Description (from the Wikipedia):
#    The 15 Puzzle is a sliding puzzle. It has 15 square tiles numbered 1 to 15 
#    in a frame that is 4 tile positions high and 4 tile positions wide, with 
#    one unoccupied position. Tiles in the same row or column of the open 
#    position can be moved by sliding them horizontally or vertically, 
#    respectively. The goal of the puzzle is to place the tiles in numerical 
#    order (from left to right, top to bottom). 
# (https://en.wikipedia.org/wiki/15_Puzzle)
#
# The code below is subject to the MIT license. 
# Copyright 2024 Pavlo Savchuk.

version 1 0
project game_of_fifteen

type Cell # Frame is dividided into 16 cells.
type Tile # Movable tiles.

# Cells (see the frame scheme below).
object cell_11 : Cell
object cell_12 : Cell
object cell_13 : Cell
object cell_14 : Cell
    object cell_21 : Cell
    object cell_22 : Cell
    object cell_23 : Cell
    object cell_24 : Cell
object cell_31 : Cell
object cell_32 : Cell
object cell_33 : Cell
object cell_34 : Cell
    object cell_41 : Cell
    object cell_42 : Cell
    object cell_43 : Cell
    object cell_44 : Cell

# Movable tiles.
object tile_1 : Tile
object tile_2 : Tile
object tile_3 : Tile
object tile_4 : Tile
object tile_5 : Tile
object tile_6 : Tile
object tile_7 : Tile
object tile_8 : Tile
object tile_9 : Tile
object tile_10 : Tile
object tile_11 : Tile
object tile_12 : Tile
object tile_13 : Tile
object tile_14 : Tile
object tile_15 : Tile


# Sets two cells as adjacent.
rel Adjacent(Cell,Cell)

# Sets a cell as empty.
rel Empty(Cell)

# Given tile is at the given cell.
rel At(Tile, Cell)

rel Use_SIMPLE()
rel Use_HSP()

# Puzzle initial state.
rlist Initial:
    #          Cells
    #  +----+----+----+----+
    #  | 11 | 12 | 13 | 14 |
    #  +----+----+----+----+
    #  | 21 | 22 | 23 | 24 |
    #  +----+----+----+----+
    #  | 31 | 32 | 33 | 34 |
    #  +----+----+----+----+
    #  | 41 | 42 | 43 | 44 |
    #  +----+----+----+----+

    Adjacent(cell_11, cell_12)
    Adjacent(cell_11, cell_21)
        Adjacent(cell_12, cell_13)
        Adjacent(cell_12, cell_22)
    Adjacent(cell_13, cell_14)
    Adjacent(cell_13, cell_23)
        Adjacent(cell_14, cell_24)
    
    Adjacent(cell_21, cell_22)
    Adjacent(cell_21, cell_31)
        Adjacent(cell_22, cell_23)
        Adjacent(cell_22, cell_32)
    Adjacent(cell_23, cell_24)
    Adjacent(cell_23, cell_33)
        Adjacent(cell_24, cell_34)
    
    Adjacent(cell_31, cell_32)
    Adjacent(cell_31, cell_41)
        Adjacent(cell_32, cell_33)
        Adjacent(cell_32, cell_42)
    Adjacent(cell_33, cell_34)
    Adjacent(cell_33, cell_43)
        Adjacent(cell_34, cell_44)

    Adjacent(cell_41, cell_42)
    Adjacent(cell_42, cell_43)
    Adjacent(cell_43, cell_44)
    

# Tiles' initial setup is selected to be solvable.
# Libmozok is now powerful enough to solve many hard puzzles but it is not 
# intended as a universal puzzle-solving library.

# Easily solvable
rlist Easy:
    At(tile_1, cell_11)
    At(tile_2, cell_12)
    At(tile_3, cell_13)
    At(tile_4, cell_14)
    At(tile_5, cell_21)
    At(tile_6, cell_22)
    At(tile_7, cell_23)
    At(tile_8, cell_24)
    At(tile_14, cell_31)
    At(tile_13, cell_32)
    At(tile_10, cell_33)
    At(tile_9, cell_34)
    At(tile_11, cell_41)
    At(tile_12, cell_42)
    At(tile_15, cell_43)
    Empty(cell_44)
    Use_SIMPLE()

# From Wikipedia.
# Solvable, but took some time to solve.
# Test is disabled by default.
rlist Medium:
    At(tile_12, cell_11)
    At(tile_1, cell_12)
    At(tile_2, cell_13)
    At(tile_15, cell_14)
    At(tile_11, cell_21)
    At(tile_6, cell_22)
    At(tile_5, cell_23)
    At(tile_8, cell_24)
    At(tile_7, cell_31)
    At(tile_10, cell_32)
    At(tile_9, cell_33)
    At(tile_4, cell_34)
    Empty(cell_41)
    At(tile_13, cell_42)
    At(tile_14, cell_43)
    At(tile_3, cell_44)
    Use_HSP()

# Much harder, but still doable.
# Took a long time to solve (~10 minutes).
# This test is disabled by default.
rlist Hard:
    At(tile_14, cell_11)
    At(tile_10, cell_12)
    At(tile_6, cell_13)
    At(tile_3, cell_14)
    At(tile_13, cell_21)
    At(tile_9, cell_22)
    At(tile_5, cell_23)
    At(tile_1, cell_24)
    At(tile_11, cell_31)
    At(tile_15, cell_32)
    At(tile_4, cell_33)
    At(tile_8, cell_34)
    At(tile_12, cell_41)
    At(tile_7, cell_42)
    At(tile_2, cell_43)
    Empty(cell_44)
    Use_HSP()

# 80-moves combination by Ralph Gasser.
# This test is disabled by default.
# - Gasser, Ralph Udo. Harnessing Computational Resources for Efficient 
#   Exhaustive Search. PhD Thesis, ETH Zürich, 1995
# - Brüngger, Adrian; Marzetta, Ambros; Fukuda, Komei; Nievergelt, Jurg.
#   The parallel search bench ZRAM and its applications. 
#   Ann. Oper. Res. 90 (1999), 45-63.
rlist Hardest_1:
    At(tile_15, cell_11)
    At(tile_14, cell_12)
    At(tile_8, cell_13)
    At(tile_12, cell_14)
    At(tile_10, cell_21)
    At(tile_11, cell_22)
    At(tile_9, cell_23)
    At(tile_13, cell_24)
    At(tile_2, cell_31)
    At(tile_6, cell_32)
    At(tile_5, cell_33)
    At(tile_1, cell_34)
    At(tile_3, cell_41)
    At(tile_7, cell_42)
    At(tile_4, cell_43)
    Empty(cell_44)
    Use_HSP()

# This one is provably unsolvable.
# You can use this puzzle as a benchmark for detecting unsolvable puzzles.
# Test is disabled by default.
rlist Impossible:
    At(tile_1, cell_11)
    At(tile_2, cell_12)
    At(tile_3, cell_13)
    At(tile_4, cell_14)
    At(tile_5, cell_21)
    At(tile_6, cell_22)
    At(tile_7, cell_23)
    At(tile_8, cell_24)
    At(tile_9, cell_31)
    At(tile_10, cell_32)
    At(tile_11, cell_33)
    At(tile_12, cell_34)
    At(tile_13, cell_41)
    At(tile_15, cell_42)
    At(tile_14, cell_43)
    Empty(cell_44)
    Use_SIMPLE()


# Initializes the Game-of-Fifteen world.

action Init_Easy:
    pre # none
    rem # none
    add Initial()
        Easy()

action Init_Medium:
    pre # none
    rem # none
    add Initial()
        Medium()

action Init_Hard:
    pre # none
    rem # none
    add Initial()
        Hard()

action Init_Hardest_1:
    pre # none
    rem # none
    add Initial()
        Hardest_1()

action Init_Impossible:
    pre # none
    rem # none
    add Initial()
        Impossible()


# Moves a tile to the adjacent empty cell. Due to the potentially enormous 
# search tree, we devised smaller states, but we require two flip actions 
# instead of one.
action Flip1:
    empty : Cell
    filled : Cell
    tile : Tile
    pre Empty(empty)
        Adjacent(empty, filled)
        At(tile, filled)
    rem Empty(empty)
        At(tile, filled)
    add Empty(filled)
        At(tile, empty)


# Moves a tile to the adjacent empty cell. Due to the potentially enormous 
# search tree, we devised smaller states, but we require two flip actions 
# instead of one.
action Flip2:
    empty : Cell
    filled : Cell
    tile : Tile
    pre Empty(empty)
        Adjacent(filled, empty)
        At(tile, filled)
    rem Empty(empty)
        At(tile, filled)
    add Empty(filled)
        At(tile, empty)


# The main quest: place the tiles in numerical order.  

# Uses SIMPLE heuristic. 
# Works better for simple cases.
main_quest PlaceTheTiles_H_SIMPLE:
    options:
        searchLimit 5000
        spaceLimit 10000
        omega 4
        use_atree # use action tree for better performance
    preconditions:
        Use_SIMPLE()
    goal:
        At(tile_1, cell_11)
        At(tile_2, cell_12)
        At(tile_3, cell_13)
        At(tile_4, cell_14)
        At(tile_5, cell_21)
        At(tile_6, cell_22)
        At(tile_7, cell_23)
        At(tile_8, cell_24)
        At(tile_9, cell_31)
        At(tile_10, cell_32)
        At(tile_11, cell_33)
        At(tile_12, cell_34)
        At(tile_13, cell_41)
        At(tile_14, cell_42)
        At(tile_15, cell_43)
        Empty(cell_44)
    actions:
        Flip1
        Flip2
    objects:
        Cell
        Tile
    subquests:
        # none

# Same quest, but uses HSP heuristic. 
# Can handle some hard combinations.
# Still can't handle impossible cases efficiently.
main_quest PlaceTheTiles_H_HSP:
    options:
        searchLimit 50000
        spaceLimit 50000
        omega 4
        heuristic HSP
        use_atree # use action tree for better performance
    preconditions:
        Use_HSP()
    goal:
        At(tile_1, cell_11)
        At(tile_2, cell_12)
        At(tile_3, cell_13)
        At(tile_4, cell_14)
        At(tile_5, cell_21)
        At(tile_6, cell_22)
        At(tile_7, cell_23)
        At(tile_8, cell_24)
        At(tile_9, cell_31)
        At(tile_10, cell_32)
        At(tile_11, cell_33)
        At(tile_12, cell_34)
        At(tile_13, cell_41)
        At(tile_14, cell_42)
        At(tile_15, cell_43)
        Empty(cell_44)
    actions:
        Flip1
        Flip2
    objects:
        Cell
        Tile
    subquests:
        # none
